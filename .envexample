# Nearby-Nearby Environment Configuration
# Copy this file to .env and fill in your actual values

#==============================================================================
# üö® CRITICAL SECURITY SETTINGS - REQUIRED FOR ALL ENVIRONMENTS
#==============================================================================

# JWT Secret Key - NEVER use default value in production!
# Generate with: openssl rand -hex 32
SECRET_KEY=your_generated_secret_key_here_minimum_32_characters

# Environment mode: development, staging, or production
ENVIRONMENT=development

# JWT token expiration time (in minutes)
ACCESS_TOKEN_EXPIRE_MINUTES=30

#==============================================================================
# üì° DATABASE CONFIGURATION
#==============================================================================

# Main application database URL
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://nearby:nearby@db/nearbynearby

# For AWS RDS or external database:
# DATABASE_URL=postgresql://username:password@your-rds-endpoint:5432/database

# Database credentials (used by Docker Compose)
POSTGRES_USER=nearby
POSTGRES_PASSWORD=nearby_secure_password_change_me
POSTGRES_DB=nearbynearby

#==============================================================================
# üß™ TEST DATABASE CONFIGURATION (Optional - for testing)
#==============================================================================

TEST_POSTGRES_USER=test_user
TEST_POSTGRES_PASSWORD=test_password_change_me
TEST_POSTGRES_DB=nearbynearby_test
TEST_DATABASE_URL=postgresql://test_user:test_password@localhost:5433/nearbynearby_test
TESTING=false

#==============================================================================
# üåê CORS AND NETWORKING CONFIGURATION
#==============================================================================

# Allowed frontend origins (comma-separated)
# Development default includes common local development URLs
ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173,http://localhost:3000

# Allowed hosts for the application (comma-separated, or "*" for any)
# In production, specify exact domains for security
ALLOWED_HOSTS=localhost,127.0.0.1

# Production domain (without https://) - will be added to CORS automatically
PRODUCTION_DOMAIN=yourdomain.com

# Frontend API Base URL (for production deployment)
# Leave empty for development (uses proxy), set to backend URL for production
VITE_API_BASE_URL=

#==============================================================================
# üîß PRODUCTION ENVIRONMENT EXAMPLES
#==============================================================================

# Example 1: Production with Database Storage
# SECRET_KEY=your_32_character_secret_generated_with_openssl_rand
# ENVIRONMENT=production
# DATABASE_URL=postgresql://username:password@your-production-db:5432/database
# ALLOWED_ORIGINS=https://yourdomain.com
# ALLOWED_HOSTS=yourdomain.com
# PRODUCTION_DOMAIN=yourdomain.com
# VITE_API_BASE_URL=http://your-ec2-ip:8000/api
# POSTGRES_PASSWORD=very_secure_production_password
# STORAGE_PROVIDER=database

# Example 2: Production with S3 Storage + CloudFront CDN
# SECRET_KEY=your_32_character_secret_generated_with_openssl_rand
# ENVIRONMENT=production
# DATABASE_URL=postgresql://username:password@your-production-db:5432/database
# ALLOWED_ORIGINS=https://yourdomain.com
# ALLOWED_HOSTS=yourdomain.com
# PRODUCTION_DOMAIN=yourdomain.com
# VITE_API_BASE_URL=http://your-ec2-ip:8000/api
# POSTGRES_PASSWORD=very_secure_production_password
# STORAGE_PROVIDER=s3
# AWS_S3_BUCKET=your-production-bucket
# AWS_REGION=us-east-1
# AWS_ACCESS_KEY_ID=your-production-access-key
# AWS_SECRET_ACCESS_KEY=your-production-secret-key
# AWS_CLOUDFRONT_DOMAIN=d123abc456def.cloudfront.net

# Example 3: Production with S3 + IAM Roles (Recommended)
# SECRET_KEY=your_32_character_secret_generated_with_openssl_rand
# ENVIRONMENT=production
# DATABASE_URL=postgresql://username:password@your-production-db:5432/database
# ALLOWED_ORIGINS=https://yourdomain.com
# ALLOWED_HOSTS=yourdomain.com
# PRODUCTION_DOMAIN=yourdomain.com
# VITE_API_BASE_URL=http://your-ec2-ip:8000/api
# POSTGRES_PASSWORD=very_secure_production_password
# STORAGE_PROVIDER=s3
# AWS_S3_BUCKET=your-production-bucket
# AWS_REGION=us-east-1
# AWS_CLOUDFRONT_DOMAIN=d123abc456def.cloudfront.net
# # No AWS keys needed - IAM role will be used automatically

#==============================================================================
# üì∏ IMAGE STORAGE CONFIGURATION
#==============================================================================

# Image storage provider: "database" (default) or "s3"
STORAGE_PROVIDER=database

# AWS S3 Configuration (only required if STORAGE_PROVIDER=s3)
# Uncomment and configure these if using S3 storage:
# AWS_S3_BUCKET=your-bucket-name
# AWS_REGION=us-east-1
# AWS_ACCESS_KEY_ID=your-access-key-id
# AWS_SECRET_ACCESS_KEY=your-secret-access-key

# Optional S3 Features
# AWS_CLOUDFRONT_DOMAIN=d123abc456def.cloudfront.net  # CDN for faster delivery
# AWS_USE_SSL=true                                     # Use HTTPS (default: true)
# AWS_SIGNATURE_VERSION=s3v4                           # Signature version (default: s3v4)

# For EC2 instances with IAM roles, you can omit ACCESS_KEY_ID and SECRET_ACCESS_KEY
# The system will automatically detect and use IAM roles

#==============================================================================
# üìù USAGE NOTES
#==============================================================================
# 1. Copy this file to .env: cp .envexample .env
# 2. Fill in your actual values (especially SECRET_KEY and passwords)
# 3. NEVER commit .env files to version control
# 4. Use different values for development, staging, and production
# 5. Generate SECRET_KEY with: openssl rand -hex 32
# 6. For S3 storage: set STORAGE_PROVIDER=s3 and configure AWS variables
# 7. For database storage: leave STORAGE_PROVIDER=database (default)
