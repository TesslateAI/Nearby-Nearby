"""sync with latest POI, user, category, attribute, relationship models

Revision ID: 706598f33ffd
Revises: d5e8c1a9b2c3
Create Date: 2025-06-27 21:17:27.890692

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import geoalchemy2

# revision identifiers, used by Alembic.
revision = '706598f33ffd'
down_revision = 'd5e8c1a9b2c3'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('businesses', sa.Column('listing_tier', sa.String(), nullable=True))
    op.add_column('businesses', sa.Column('price_range', sa.String(), nullable=True))
    op.drop_column('businesses', 'listing_type')
    op.drop_column('businesses', 'is_service_business')
    op.drop_column('businesses', 'contact_phone')
    op.drop_column('businesses', 'contact_name')
    op.drop_column('businesses', 'contact_email')
    op.drop_column('businesses', 'attributes')
    op.add_column('categories', sa.Column('applicable_to', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('categories', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('categories', sa.Column('sort_order', sa.Integer(), nullable=True))
    op.drop_constraint(op.f('categories_slug_key'), 'categories', type_='unique')
    op.add_column('events', sa.Column('cost_text', sa.String(), nullable=True))
    op.drop_constraint(op.f('events_venue_poi_id_fkey'), 'events', type_='foreignkey')
    op.drop_column('events', 'venue_poi_id')
    op.add_column('points_of_interest', sa.Column('description_long', sa.Text(), nullable=True))
    op.add_column('points_of_interest', sa.Column('description_short', sa.String(length=250), nullable=True))
    op.add_column('points_of_interest', sa.Column('address_full', sa.String(), nullable=True))
    op.add_column('points_of_interest', sa.Column('address_street', sa.String(), nullable=True))
    op.add_column('points_of_interest', sa.Column('address_city', sa.String(), nullable=True))
    op.add_column('points_of_interest', sa.Column('address_state', sa.String(), nullable=True))
    op.add_column('points_of_interest', sa.Column('address_zip', sa.String(), nullable=True))
    op.add_column('points_of_interest', sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False))
    op.add_column('points_of_interest', sa.Column('is_disaster_hub', sa.Boolean(), nullable=True))
    op.add_column('points_of_interest', sa.Column('website_url', sa.String(), nullable=True))
    op.add_column('points_of_interest', sa.Column('phone_number', sa.String(), nullable=True))
    op.add_column('points_of_interest', sa.Column('email', sa.String(), nullable=True))
    op.add_column('points_of_interest', sa.Column('photos', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('points_of_interest', sa.Column('hours', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('points_of_interest', sa.Column('amenities', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('points_of_interest', sa.Column('contact_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('points_of_interest', sa.Column('compliance', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('points_of_interest', sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('points_of_interest', sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('points_of_interest', sa.Column('last_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('points_of_interest', 'poi_type',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('BUSINESS', 'PARK', 'TRAIL', 'EVENT', name='poitype'),
               existing_nullable=False,
               postgresql_using="poi_type::poitype")
    op.alter_column('points_of_interest', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("'Fully Open'::character varying"))
    op.alter_column('points_of_interest', 'status_message',
               existing_type=sa.VARCHAR(length=80),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('points_of_interest', 'is_verified',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.drop_index(op.f('ix_points_of_interest_slug'), table_name='points_of_interest')
    op.execute('DROP INDEX IF EXISTS idx_points_of_interest_location')
    op.create_index('idx_points_of_interest_location', 'points_of_interest', ['location'], unique=False, postgresql_using='gist')
    op.drop_constraint(op.f('points_of_interest_location_id_fkey'), 'points_of_interest', type_='foreignkey')
    op.drop_constraint(op.f('fk_poi_parent_id'), 'points_of_interest', type_='foreignkey')
    op.drop_column('points_of_interest', 'description')
    op.drop_column('points_of_interest', 'summary')
    op.drop_column('points_of_interest', 'featured_image_url')
    op.drop_column('points_of_interest', 'updated_at')
    op.drop_column('points_of_interest', 'location_id')
    op.drop_column('points_of_interest', 'slug')
    op.drop_column('points_of_interest', 'parent_poi_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('points_of_interest', sa.Column('parent_poi_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('points_of_interest', sa.Column('slug', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('points_of_interest', sa.Column('location_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('points_of_interest', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('points_of_interest', sa.Column('featured_image_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('points_of_interest', sa.Column('summary', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('points_of_interest', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('fk_poi_parent_id'), 'points_of_interest', 'points_of_interest', ['parent_poi_id'], ['id'])
    op.create_foreign_key(op.f('points_of_interest_location_id_fkey'), 'points_of_interest', 'locations', ['location_id'], ['id'])
    op.drop_index('idx_points_of_interest_location', table_name='points_of_interest', postgresql_using='gist')
    op.create_index(op.f('ix_points_of_interest_slug'), 'points_of_interest', ['slug'], unique=True)
    op.alter_column('points_of_interest', 'is_verified',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('points_of_interest', 'status_message',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=80),
               existing_nullable=True)
    op.alter_column('points_of_interest', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'Fully Open'::character varying"))
    op.alter_column('points_of_interest', 'poi_type',
               existing_type=sa.Enum('BUSINESS', 'PARK', 'TRAIL', 'EVENT', name='poitype'),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('points_of_interest', 'last_updated')
    op.drop_column('points_of_interest', 'created_at')
    op.drop_column('points_of_interest', 'custom_fields')
    op.drop_column('points_of_interest', 'compliance')
    op.drop_column('points_of_interest', 'contact_info')
    op.drop_column('points_of_interest', 'amenities')
    op.drop_column('points_of_interest', 'hours')
    op.drop_column('points_of_interest', 'photos')
    op.drop_column('points_of_interest', 'email')
    op.drop_column('points_of_interest', 'phone_number')
    op.drop_column('points_of_interest', 'website_url')
    op.drop_column('points_of_interest', 'is_disaster_hub')
    op.drop_column('points_of_interest', 'location')
    op.drop_column('points_of_interest', 'address_zip')
    op.drop_column('points_of_interest', 'address_state')
    op.drop_column('points_of_interest', 'address_city')
    op.drop_column('points_of_interest', 'address_street')
    op.drop_column('points_of_interest', 'address_full')
    op.drop_column('points_of_interest', 'description_short')
    op.drop_column('points_of_interest', 'description_long')
    op.add_column('events', sa.Column('venue_poi_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('events_venue_poi_id_fkey'), 'events', 'points_of_interest', ['venue_poi_id'], ['id'])
    op.drop_column('events', 'cost_text')
    op.create_unique_constraint(op.f('categories_slug_key'), 'categories', ['slug'], postgresql_nulls_not_distinct=False)
    op.drop_column('categories', 'sort_order')
    op.drop_column('categories', 'is_active')
    op.drop_column('categories', 'applicable_to')
    op.add_column('businesses', sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('businesses', sa.Column('contact_email', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('businesses', sa.Column('contact_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('businesses', sa.Column('contact_phone', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('businesses', sa.Column('is_service_business', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('businesses', sa.Column('listing_type', sa.VARCHAR(), server_default=sa.text("'free'::character varying"), autoincrement=False, nullable=False))
    op.drop_column('businesses', 'price_range')
    op.drop_column('businesses', 'listing_tier')
    # ### end Alembic commands ###